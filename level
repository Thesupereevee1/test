(async () => {
  // Inject SweetAlert2 script into the page if it's not already included
  const swalScript = document.createElement('script');
  swalScript.src = 'https://cdn.jsdelivr.net/npm/sweetalert2@11';
  document.head.appendChild(swalScript);

  await new Promise((resolve) => {
    swalScript.onload = resolve;
  });

  // Function to execute the hack
  const hack = (name, description, callback) => {
    console.log(`Hack: ${name} - ${description}`);
    callback(hack, player);
  };

  // Function to ask for an integer input using SweetAlert2
  const InputTypes = {
    integer: async (title, min, max) => {
      const { value: level, isConfirmed } = await Swal.fire({
        title: title,
        input: 'number',
        inputAttributes: {
          min: min,
          max: max,
          step: 1
        },
        inputValue: min,
        showCancelButton: true,
        confirmButtonText: 'Submit',
        showLoaderOnConfirm: true,
        preConfirm: (value) => {
          return new Promise((resolve) => {
            if (value < min || value > max) {
              Swal.showValidationMessage(`Level must be between ${min} and ${max}`);
            } else {
              resolve(value);
            }
          });
        },
        allowOutsideClick: () => !Swal.isLoading()
      });
      if (isConfirmed) {
        return level;
      } else {
        return null;
      }
    }
  };

  // Success message using SweetAlert2
  const success = (message) => {
    Swal.fire({
      title: 'Success',
      text: `${message}`,
      icon: 'success',
      toast: true,
      position: 'bottom',
      showConfirmButton: false,
      timer: 3000
    });
  };

  // Change level function (adjusting the stars based on level)
  function changeLevel(level, player) {
    if (level === 1) {
      player.data.stars = 0;
    } else if (level === 2) {
      player.data.stars = 10;
    } else {
      const offsetLevel = level - 2;
      const xpConstant = 1.042;
      player.data.stars = Math.round((((1 - Math.pow(xpConstant, offsetLevel)) / (1 - xpConstant)) * 20) + 10);
    }

    player.data.level = level;
  }

  // Get the player object from the game (make sure this structure is correct)
  const player = Boot.prototype.game._state._current.user.source;

  // Execute the hack
  hack("Set Level", "Sets the level of your player.", async (hack, player) => {
    // Prompt for a level input between 1 and 125
    const value = await InputTypes.integer("Please enter the level you want to be.", 1, 125);
    if (value !== null) {
      // Change the player's level
      changeLevel(value, player);
      // Notify user of success
      success(`You are now level ${value}.`);
    }
  });
})();
